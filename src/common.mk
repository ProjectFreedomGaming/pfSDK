# SPDX-FileCopyrightText: 2023-present pfSDK contributors
#
# SPDX-License-Identifier: GPL-3.0-or-later

# -- Based on code Copyright 2021-2022 Tom Storey

.PHONY: default
default: all ;

# -- Specify the CPU type that you are targeting your build towards.
# -- Supported architectures can usually be found with the --target-help argument
# -- passed to gcc, but a quick summary is: 68000, 68010, 68020, 68030, 68040, 68060, cpu32 (includes 68332 and 68360),
# -- 68302
CPU = 68000

# -- Names of various commands we use during builds.
PREFIX = m68k-eabi-elf
CC = $(PREFIX)-gcc
AR = $(PREFIX)-ar
OBJCOPY = $(PREFIX)-objcopy
LD = $(PREFIX)-ld

ifeq ($(OPTIMIZATION),)
	ifeq ($(C_OPTIMIZATION),)
		C_OPTIMIZATION = -O3
	endif

	ifeq ($(ASM_OPTIMIZATION),)
		ASM_OPTIMIZATION = -O3
	endif
else
	C_OPTIMIZATION = $(OPTIMIZATION)
	ASM_OPTIMIZATION = $(OPTIMIZATION)
endif

DEFINES += TARGET_PF=1
C_DEFINES += $(DEFINES)
ASM_DEFINES += $(DEFINES)

C_WARNINGS += $(WARNINGS)
ASM_WARNINGS += $(WARNINGS)

# -- Where to find any include headers
INCLUDE_DIRS += $(PF_SDK_ROOT)/include $(PF_SDK_ROOT)/include/libc
C_INCLUDE_DIRS += $(INCLUDE_DIRS)
ASM_INCLUDE_DIRS += $(INCLUDE_DIRS)

# -- Default flags for the C Compiler.
COMMON_FLAGS += -m$(CPU) -Wall -Werror -g -static -msoft-float -MMD -MP
C_FLAGS = $(COMMON_FLAGS) $(addprefix -W, $(C_WARNINGS)) $(addprefix -I, $(C_INCLUDE_DIRS)) $(addprefix -D, $(C_DEFINES)) $(C_OPTIMIZATION)
ASM_FLAGS = $(COMMON_FLAGS) $(addprefix -W, $(ASM_WARNINGS)) $(addprefix -I, $(ASM_INCLUDE_DIRS)) $(addprefix -D, $(ASM_DEFINES)) $(ASM_OPTIMIZATION)

# -- For now the firmware is being linked with the executable. That won't be the case in the future obviously.
LINK_FLAGS = --script="$(PF_SDK_ROOT)/src/common.ld" -L"$(PF_SDK_ROOT)/lib" -lc -lpfFirmware

# -- By default we read from any sources in the current or subsequent folders.
# -- and we build inside a subfolder named 'build'.
ifeq ($(SRC_DIR),)
	SRC_DIR = .
endif

ifeq ($(BUILD_DIR),)
	BUILD_DIR = _build
endif

C_SRC = $(shell find $(SRC_DIR)/ -name "*.c")
ASM_SRC = $(shell find $(SRC_DIR)/ -name "*.S")

C_OBJECTS = $(C_SRC:$(SRC_DIR)/%.c=$(BUILD_DIR)%.o)
ASM_OBJECTS = $(ASM_SRC:$(SRC_DIR)/%.S=$(BUILD_DIR)%.o)

# -- The .SECONDEXPANSION: is needed to enable the $$ rules for GNU Make.
# -- It is needed to allow target based substitution rules in the prerequisites for $(C_OBJECTS) and $(ASM_OBJECTS).
.SECONDEXPANSION:

# -- The prerequisite $$(patsubst $(BUILD_DIR)/%.o,$(SRC_DIR)/%.c,$$@) is saying,
# -- that the current target depends on a specific source file with the same folder structure and name.
$(C_OBJECTS): $$(patsubst $(BUILD_DIR)/%.o,$(SRC_DIR)/%.c,$$@)
	@mkdir -p $(@D)
	$(CC) $(C_FLAGS) -c -o $@ $<

$(ASM_OBJECTS): $$(patsubst $(BUILD_DIR)/%.o,$(SRC_DIR)/%.S,$$@)
	@mkdir -p $(@D)
	$(CC) $(ASM_FLAGS) -c -o $@ $<

ifneq ($(LIB_TARGET),)
%.a: $(C_OBJECTS) $(ASM_OBJECTS)
	$(info Building $@.)
	$(AR) rcs $@ $^
endif

ifneq ($(ROM_TARGET),)
.PRECIOUS: %.elf
%.elf: $(C_OBJECTS) $(ASM_OBJECTS) $(PF_SDK_ROOT)/lib/libc.a $(PF_SDK_ROOT)/lib/libpfFirmware.a
	$(info Building $@.)
	$(LD) $^ $(LINK_FLAGS) -o $@

%.pfxrom: %.elf
	$(info Extracting $@.)
	$(OBJCOPY) -O binary $< $@
endif

# -- Add
TARGETS += $(LIB_TARGET) $(ROM_TARGET) $(OBJECTS_TARGET)

$(addprefix $(INSTALL_DIR)/, $(TARGETS)): $(addprefix $(BUILD_DIR)/, $(TARGETS))
	$(info Installing $@.)
	@mkdir -p $(@D)
	@cp $< $@

all: $(addprefix $(BUILD_DIR)/, $(TARGETS))

ifneq ($(ROM_TARGET),)
dumprom: $(addprefix $(BUILD_DIR)/, $(ROM_TARGET))
	$(info Dumping $(basename $<).elf.)
	$(info Dumping m68k-eabi-elf-objdump -dtC $(basename $<).elf)
	m68k-eabi-elf-objdump -dtC $(basename $<).elf | less
	
sim: $(addprefix $(BUILD_DIR)/, $(ROM_TARGET))
	$(info Running '$(notdir $<)'.)
	@$(PF_SDK_ROOT)/bin/macOS/pfSimulator.app/Contents/MacOS/pfSimulator $<
endif

ifneq ($(INSTALL_DIR),)
INSTALL_TARGETS = $(addprefix $(INSTALL_DIR)/, $(TARGETS))
install: $(INSTALL_TARGETS)
endif

# -- Cleaning just requires deleting the build folder.
clean:
	$(info Cleaning project.)
	@rm -Rf $(BUILD_DIR)

# -- Include any dependency files generated by the compiler.
-include $(C_SRC:$(SRC_DIR)/%.c=$(BUILD_DIR)%.d) $(ASM_SRC:$(SRC_DIR)/%.S=$(BUILD_DIR)%.d)
